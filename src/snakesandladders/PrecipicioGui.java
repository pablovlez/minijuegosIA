/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrecipicioGui.java
 *
 * Created on 5/11/2010, 11:41:23 PM
 */
package snakesandladders;

import java.awt.Cursor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Pablo Velez
 */
public class PrecipicioGui extends javax.swing.JFrame {

    boolean turnoMaquina;
    double dadoMax = 0;
    double dadoMin = 0;
    int acumMax = 0;
    int acumMin = 0;
    int numeroAleatorio = (int) (Math.random() * 2 + 1);
    Precipicio p = new Precipicio();
    String operadorH = "Inicio";
    String operadorM = "Inicio";
    double avanceMax = 48;
    double avanceMin = 45;
    public Hilo hilo = new Hilo();
    String ganador = null;
    boolean lanzar = true;

    /** Creates new form PrecipicioGui */
    public PrecipicioGui(boolean _turnomaquina) {
        super("Precipicio");
        turnoMaquina = _turnomaquina;
        initComponents();

        if (turnoMaquina == true) {
            hilo.iniciar();
        }


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbPlayer1 = new javax.swing.JLabel();
        lbPlayer2 = new javax.swing.JLabel();
        lbDado = new javax.swing.JLabel();
        btnLanzar = new javax.swing.JButton();
        btnPlantarse = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaInfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        lbPlayer1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tablero/player2.png"))); // NOI18N
        jPanel1.add(lbPlayer1);
        lbPlayer1.setBounds(30, 350, 70, 90);

        lbPlayer2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tablero/player1.png"))); // NOI18N
        jPanel1.add(lbPlayer2);
        lbPlayer2.setBounds(10, 320, 70, 90);

        lbDado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dados/dados.gif"))); // NOI18N
        jPanel1.add(lbDado);
        lbDado.setBounds(700, 30, 70, 70);

        btnLanzar.setText("Lanzar");
        btnLanzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLanzarActionPerformed(evt);
            }
        });
        jPanel1.add(btnLanzar);
        btnLanzar.setBounds(690, 310, 100, 23);

        btnPlantarse.setText("Plantarse");
        btnPlantarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlantarseActionPerformed(evt);
            }
        });
        jPanel1.add(btnPlantarse);
        btnPlantarse.setBounds(690, 360, 100, 23);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/precipicio/escalera.jpg"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.add(jLabel1);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(80, 20, 480, 390);

        txaInfo.setColumns(20);
        txaInfo.setRows(5);
        jScrollPane1.setViewportView(txaInfo);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(630, 120, 220, 160);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-898)/2, (screenSize.height-525)/2, 898, 525);
    }// </editor-fold>//GEN-END:initComponents

        private void btnLanzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLanzarActionPerformed
            // TODO add your handling code here:
            
            dadoMin = (int) (Math.random() * 3 + 1);                       
            lbDado.setIcon(dados[(int) dadoMin]);
            acumMin += dadoMin;
            moverMin(avanceMin);
            turnoMaquina = true;
            System.out.println("Tu acumulado es " + acumMin);
            txaInfo.append("Tu acumulado es " + acumMin + "\n");
            if (hilo.animationThread != null) {
                hilo.resum();
            } else {
                hilo.iniciar();
            }

        }//GEN-LAST:event_btnLanzarActionPerformed

        private void btnPlantarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlantarseActionPerformed
            // TODO add your handling code here:
            operadorH = "Plantar";
            turnoMaquina = true;
            btnLanzar.setEnabled(false);
            btnPlantarse.setEnabled(false);
            if (hilo.animationThread != null) {
                hilo.resum();
            } else {
                hilo.iniciar();
            }
        }//GEN-LAST:event_btnPlantarseActionPerformed
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

    public void run() {
    new PrecipicioGui().setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLanzar;
    private javax.swing.JButton btnPlantarse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDado;
    private javax.swing.JLabel lbPlayer1;
    private javax.swing.JLabel lbPlayer2;
    private javax.swing.JTextArea txaInfo;
    // End of variables declaration//GEN-END:variables
    public ImageIcon[] dados = {new javax.swing.ImageIcon(getClass().getResource("/images/dados/dados.gif")),
        new javax.swing.ImageIcon(getClass().getResource("/images/dados/1.jpg")),
        new javax.swing.ImageIcon(getClass().getResource("/images/dados/2.jpg")),
        new javax.swing.ImageIcon(getClass().getResource("/images/dados/3.jpg"))
    };

    public void jugar() {



        if (!operadorM.equals("Plantar")) {
            while (turnoMaquina == true && acumMax <= 8) {

                if (p.ArbolMiniMax(acumMin, acumMax, operadorH).equals("Lanzar")) {
                    //p.verArbol();
                    dadoMax = (int) (Math.random() * 3 + 1);  
                    lbDado.setIcon(dados[(int) dadoMax]);
                    acumMax += dadoMax;
                    moverMax(avanceMax);
                    operadorM = "Lanzar";
                    turnoMaquina = false;
                    txaInfo.append("Desicion de la maquina fue Lanzar \n");
                    txaInfo.append("Acumulado de la Maquina " + acumMax + "\n");
                } else {
                    if (p.ArbolMiniMax(acumMin, acumMax, operadorH).equals("Plantar")) {
                        // p.verArbol();
                        turnoMaquina = false;
                        operadorM = "Plantar";
                        txaInfo.append("Desicion de la maquina fue Plantarse \n");
                        txaInfo.append("Acumulado de la Maquina " + acumMax + "\n");
                    }
                }

            }
        }
        terminaJuego();


        if (hilo.animationThread != null) {
            setCursor(Cursor.getDefaultCursor());
            btnPlantarse.setEnabled(true);
            btnLanzar.setEnabled(true);
            hilo.pausar();

        }




    }

    public void terminaJuego() {
        if(acumMax>8){
        txaInfo.append("Has ganado, la maquina ha caido por el precipicio \n");
                        JOptionPane.showMessageDialog(this, "HAS GANADO, LA MAQUINA CAYO POR EL PRECIPICIO\n LA MAQUINA RETROCEDERA 6 CASILLAS");
                        ganador = "MINC";
                        dispose();
        }
        else{
        if (operadorH.equals("Plantar")) {
            if (acumMax > acumMin) {
                txaInfo.append("Ha ganado la maquina \n");
                JOptionPane.showMessageDialog(this, "HA GANADO LA MAQUINA\n RETROCEDERAS 4 CASILLAS");
                ganador = "MAX";
                dispose();
            } else {
                if (acumMax < acumMin) {
                    txaInfo.append("Has ganado \n");
                    JOptionPane.showMessageDialog(this, "HAS GANADO\n LA MAQUINA RETROCEDERA 4 CASILLAS");
                    ganador = "MIN";

                    dispose();
                } else {
                    txaInfo.append("Empate \n");
                    JOptionPane.showMessageDialog(this, "EMPATE\n AMBOS RETROCEDERAN 3 CASILLAS");
                    ganador = "EMP";
                    dispose();
                }
            }
        } else {


            if (acumMax > 8 && acumMin > 8) {
                txaInfo.append("Empate ambos han caido por el precipicio \n");
                JOptionPane.showMessageDialog(this, "Empate\n Ambos han caido por el precipicio ");
                ganador = "EMPC";
                dispose();
            } else {
                if (acumMin > 8) {
                    txaInfo.append("Ha ganado la maquina, has caido por el precipicio \n");
                    JOptionPane.showMessageDialog(this, "Ha ganado la maquina, has caido por el precipicio \n Retrocederas 6 casillas");
                    ganador = "MAXC";
                    dispose();
                } else {
                    if (acumMax > 8) {
                        txaInfo.append("Has ganado, la maquina ha caido por el precipicio \n");
                        JOptionPane.showMessageDialog(this, "Has ganado, la maquina ha caido por el precipicio \n La maquina retrocedera 6 casillas");
                        ganador = "MINC";
                        dispose();
                    }
                }
            }
        }
        if (operadorM.equals("Plantar") && turnoMaquina == true) {

            if (acumMax > acumMin) {
                txaInfo.append("Ha ganado la maquina \n");
                JOptionPane.showMessageDialog(this, "Ha ganado la maquina \n Retrocederas 4 casillas");
                ganador = "MAX";
                dispose();
            } else {
                if (acumMax < acumMin) {
                    txaInfo.append("Has ganado \n");
                    JOptionPane.showMessageDialog(this, "Has ganado\n La maquina Retrocedera 4 casillas");
                    ganador = "MIN";

                    dispose();
                } else {
                    txaInfo.append("Empate \n");
                    JOptionPane.showMessageDialog(this, "Empate\n Ambos retrocederan 3 casillas");
                    ganador = "EMP";
                    dispose();
                }
            }
        }}
    }

    public void moverMin(double a) {

        if (acumMin == 1) {
            avanceMin += 50;
            System.out.println("-----------" + avanceMin);
        } else {
            avanceMin = avanceMin + (50 * (dadoMin));
        }
        a = avanceMin;

        double pos = (-0.73 * a) + 328;
        if (acumMin > 8) {
            lbPlayer1.setBounds(530, 300, 70, 90);
        } else {
            lbPlayer1.setBounds((int) a, (int) pos, 70, 90);
        }

    }

    public void moverMax(double a) {

        if (acumMax == 1) {
            avanceMax += 52;
            System.out.println("-----------" + avanceMin);
        } else {
            avanceMax = avanceMax + (52 * (dadoMax));
        }

        a = avanceMax;

        double pos = (-0.68 * a) + 320;
        if (acumMax > 8) {
            lbPlayer2.setBounds(530, 300, 70, 90);
        } else {
            lbPlayer2.setBounds((int) a, (int) pos, 70, 90);
        }

    }
   

    public class Hilo implements Runnable {

        //private boolean continuar = true;
        public Hilo() {
        }
        // metodo para poner el boolean a false.
        private Thread animationThread = null;

        public void run() {
            Thread currentThread = Thread.currentThread();


            while (currentThread == animationThread) {
                btnLanzar.setEnabled(false);
                btnPlantarse.setEnabled(false);
                setCursor(Cursor.WAIT_CURSOR);
                try {
                    animationThread.sleep(1000);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                jugar();
            }
        }

        public void iniciar() {
            if (this.animationThread == null) {
                this.animationThread = new Thread(this, "animacion");
                this.animationThread.start();
            }

        }

        public void detener() {
            this.animationThread = null;
        }

        public void pausar() {
            this.animationThread.suspend();
        }

        public void resum() {
            this.animationThread.resume();
        }
    }
}
